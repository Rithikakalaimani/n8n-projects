{
  "name": "Jobflow Tracker",
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {
          "q": "(\n  from:(\n    noreply OR \"no-reply\" OR \"do-not-reply\" OR hr OR careers OR jobs OR recruitment OR recruiter OR talentacquisition OR hiring OR \"jobs@\" OR \"careers@\" OR \"apply@\" OR \"recruitment@\" OR \"talent@\" OR \"internships@\" OR \"noreply@\" OR \"notifications@\" OR \"info@\"\n  )\n  OR\n  subject:(\n    application OR apply OR applied OR \"job application\" OR \"application submitted\" OR interview OR \"interview scheduled\" OR \"interview invitation\" OR offer OR \"job offer\" OR rejected OR \"application rejected\" OR shortlisted OR \"you are shortlisted\" OR hiring OR \"job opening\" OR \"career opportunity\" OR \"position available\" OR \"role available\" OR candidate OR internship OR \"internship opportunity\" OR \"internship position\" OR \"internship opening\" OR \"next steps\" OR \"final round\" OR \"pre-screening\" OR \"assessment\" OR \"test invitation\" OR \"assessment scheduled\"\n  )\n  OR\n  body:(\n    \"thank you for applying\" OR \n    \"your application has been received\" OR \n    \"application received\" OR \n    \"shortlisted\" OR \n    \"you are shortlisted\" OR \n    \"schedule interview\" OR \n    \"interview scheduled\" OR \n    \"next steps\" OR \n    \"hiring process\" OR \n    \"we regret to inform you\" OR \n    \"While we’re not able to reach out to every applicant\" OR\n    \"We appreciate your enthusiasm and the effort you have put into your application.\" OR\n    \"While we aren’t able to move forward with your application for this role\" OR\n    \"After careful consideration\" OR\n    \"we have decided to progress with other candidates for this role\" OR\n    \"congratulations\" OR \n    \"we are pleased to offer\" OR \n    \"career opportunity\" OR \n    \"internship opportunity\" OR \n    \"final round\" OR \n    \"pre-screening completed\" OR \n    \"assessment scheduled\" OR \n    \"please confirm\" OR \n    \"application status\" OR \n    \"application update\" OR \n    \"job opening\" OR \n    \"role confirmation\" OR \n    \"interview invitation\" OR \n    \"offer letter\" OR \n    \"selection process\"\n  )\n)\n"
        }
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        0,
        0
      ],
      "id": "f39ffc3d-02c1-486f-804d-8d6fece1ca00",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "QNEOTWaB3hLO5A4w",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\n// This node takes Gmail output and structures job application details\n// If no input, return empty\nif (!items || items.length === 0) return [];\n\n// Extract JSON from LLM output (strip ```json and ``` if present)\nreturn items.map(item => {\n    let rawText = item.json.text || \"\";\n    \n    // Remove ```json and ``` wrapper\n    rawText = rawText.replace(/```json/i, \"\").replace(/```/g, \"\").trim();\n    \n    // Parse JSON safely\n    let parsed = {};\n    try {\n        parsed = JSON.parse(rawText);\n    } catch (e) {\n        parsed = { error: \"Invalid JSON from LLM\", rawText };\n    }\n\n    // return { json: parsed };\n  return { \n        json: {\n            ...parsed,\n            threadId: $('Gmail Trigger').first().json.threadId || null // Gmail thread ID\n        }\n    };\n})\n  .filter(entry => entry.json.status !== \"Announcement\");\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        0
      ],
      "id": "ef5b673e-b006-4980-8cad-c6f1d8935ff5",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "operation": "get",
        "messageId": "={{$json[\"id\"]}}"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        192,
        0
      ],
      "id": "07069a5f-3ef7-496d-9121-f0ae73569e20",
      "name": "Get a message",
      "webhookId": "892c9c55-e1b3-4085-ac87-40485d3d0b15",
      "credentials": {
        "gmailOAuth2": {
          "id": "QNEOTWaB3hLO5A4w",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Subject: {{ $json.Subject }}\nBody : {{ $json.snippet }}",
        "messages": {
          "messageValues": [
            {
              "type": "HumanMessagePromptTemplate",
              "message": "=You are a smart email parser specialized in extracting structured information about job applications from emails. Your goal is to produce **accurate JSON output** that can be stored in a Google Sheet.\n\nInput Email:\nSubject: {{$json[\"Subject\"]}}\nBody: {{$json[\"snippet\"]}}\nInternalDate : {{ $json.internalDate }}\nFrom : {{ $json.From }}\nInstructions:\n1. Determine the application status.Possible values:\n   - Applied: email confirms user applied\n   - Pending: awaiting response or next steps\n   - Rejected: user application rejected\n   - Interview: interview scheduled\n   - Assessment: assessment or test scheduled\n   - Offer: offer received\n   - Declined: user declined the offer\n   - Announcement: These are general information or internship/job posting, not applied.\n2. Extract:\n   - company: name of the company\n   - jobTitle: position or role\n   - status: one of the statuses above\n   - date: {{ $json.internalDate }}in YYYY-MM-DD format (use internalDate if available)\n   - platform: Source of application (e.g., LinkedIn, Naukri, Indeed, Glassdoor,Instahyre, Company Careers Page, Referral, etc.){{ $json.From }} see the \"From\" email to identify the platform \n    * If the email comes from a company domain (e.g., hp.com), set platform to \"{Company} Careers Page\"\n    * If unknown, return \"Unknown\"\n   - additionalNotes: Any relevant details such as stipend, deadline, location, interview mode, referral information, or key instructions\n3. Output **strictly as JSON** with fields: company, jobTitle, status, date,Platform,additionalNotes\nExample Output:\n{\n  \"company\": \"Goldman Sachs\",\n  \"jobTitle\": \"Software Engineer Internship\",\n  \"status\": \"Applied\",\n  \"date\": \"2025-09-21\" ,\n  \"platform\": \"LinkedIn\",\n  \"additionalNotes\": \"Applications opened, includes structured assessments\"\n}\n\nNow parse the input email and return the JSON.\n\n"
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        400,
        0
      ],
      "id": "23a3e905-3711-4330-a795-6b88f684acb7",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        336,
        208
      ],
      "id": "925a8956-a3e2-43a6-ab22-3cc62435b4c6",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "wNionNT0h6iuofHG",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M",
          "mode": "list",
          "cachedResultName": "Jobflow Tracker",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "ThreadId": "={{ $json.threadId }}",
            "Company": "={{ $json.company }}",
            "JobTitle": "={{ $json.jobTitle }}",
            "Status": "={{ $json.status }}",
            "Dates": "={{ $json.date }}",
            "Additional Notes": "={{ $json.additionalNotes }}",
            "Platform": "={{ $json.platform }}"
          },
          "matchingColumns": [
            "ThreadId"
          ],
          "schema": [
            {
              "id": "Company",
              "displayName": "Company",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "JobTitle",
              "displayName": "JobTitle",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Status",
              "displayName": "Status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Dates",
              "displayName": "Dates",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Platform",
              "displayName": "Platform",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "Additional Notes",
              "displayName": "Additional Notes",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ThreadId",
              "displayName": "ThreadId",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        928,
        0
      ],
      "id": "57542db3-274c-43a3-92ef-31dc3bd22fe3",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "PH5H9EmhlxVgxwDf",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        16,
        384
      ],
      "id": "dc3be2c0-2f09-432e-8acf-c6ef1fd1413b",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M",
          "mode": "list",
          "cachedResultName": "Jobflow Tracker",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        240,
        384
      ],
      "id": "61eac0ba-d5c0-491c-86a0-06622f5359e1",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "PH5H9EmhlxVgxwDf",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nconst oneMonthAgo = new Date();\noneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1); // changed from -2 to -1\n\nreturn items\n  .map((item, index) => {\n    // Normalize Status (case-insensitive)\n    const status = (item.json.Status || \"\").toLowerCase();\n\n    // Normalize Date\n    let appDate = null;\n    if (item.json.Dates) {\n      // Try parsing YYYY-MM-DD\n      appDate = new Date(item.json.Dates);\n      if (isNaN(appDate)) {\n        // Try parsing M/D/YYYY\n        const parts = item.json.Dates.split(\"/\");\n        if (parts.length === 3) {\n          const [month, day, year] = parts;\n          appDate = new Date(`${year}-${month.padStart(2,'0')}-${day.padStart(2,'0')}`);\n        }\n      }\n    }\n\n    return {\n      json: {\n        ...item.json,\n        statusNormalized: status,\n        appDate,\n        rowNumber: index + 2 // +2 because row 1 = header\n      }\n    };\n  })\n  // Filter rows: Status = \"applied\" AND valid date AND older than 1 month\n  .filter(item => item.json.statusNormalized === \"applied\" && item.json.appDate && item.json.appDate < oneMonthAgo);\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        384
      ],
      "id": "bab24d4a-2838-404d-ae8b-b17d2c2df744",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "operation": "delete",
        "documentId": {
          "__rl": true,
          "value": "1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M",
          "mode": "list",
          "cachedResultName": "Jobflow Tracker",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1EkiqAGbkI6n0WIOvXZpeUbiXdgYUs0oZTqUVhX7OM0M/edit#gid=0"
        },
        "startIndex": "={{ $json.rowNumber }}"
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        688,
        384
      ],
      "id": "7b07f681-eb92-44c3-9b74-1f22e40826a4",
      "name": "Delete rows or columns from sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "PH5H9EmhlxVgxwDf",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Get a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a message": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Delete rows or columns from sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f0e4a86e-01aa-4177-a76b-64e5f95c08f0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "518ea6778b3fb572987469aa9a36c2fd41489b60af7e779af2c9bc06e2aff743"
  },
  "id": "JKN6Xl2FLb2Vg0Zo",
  "tags": []
}